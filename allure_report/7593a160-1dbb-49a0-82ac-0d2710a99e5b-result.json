{"name": "test_add_patient[steve@gmail.com-password-ranveer-9873065421-ranveer@gmail.com-hsr,Banglore-35-blood pressure]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" name=\"submit\" id=\"submit\" class=\"btn btn-o btn-primary\" disabled=\"\">...</button> is not clickable at point (331, 517). Other element would receive the click: <form role=\"form\" name=\"\" method=\"post\">...</form>\n  (Session info: chrome=126.0.6478.185)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72F61EEB2+31554]\n\t(No symbol) [0x00007FF72F597EE9]\n\t(No symbol) [0x00007FF72F45872A]\n\t(No symbol) [0x00007FF72F4B012E]\n\t(No symbol) [0x00007FF72F4ADAF2]\n\t(No symbol) [0x00007FF72F4AAF8B]\n\t(No symbol) [0x00007FF72F4AA156]\n\t(No symbol) [0x00007FF72F49C151]\n\t(No symbol) [0x00007FF72F4CD02A]\n\t(No symbol) [0x00007FF72F49BA76]\n\t(No symbol) [0x00007FF72F4CD240]\n\t(No symbol) [0x00007FF72F4EC977]\n\t(No symbol) [0x00007FF72F4CCDD3]\n\t(No symbol) [0x00007FF72F49A33B]\n\t(No symbol) [0x00007FF72F49AED1]\n\tGetHandleVerifier [0x00007FF72F928B2D+3217341]\n\tGetHandleVerifier [0x00007FF72F975AF3+3532675]\n\tGetHandleVerifier [0x00007FF72F96B0F0+3489152]\n\tGetHandleVerifier [0x00007FF72F6CE786+750614]\n\t(No symbol) [0x00007FF72F5A376F]\n\t(No symbol) [0x00007FF72F59EB24]\n\t(No symbol) [0x00007FF72F59ECB2]\n\t(No symbol) [0x00007FF72F58E17F]\n\tBaseThreadInitThunk [0x00007FFD35E8257D+29]\n\tRtlUserThreadStart [0x00007FFD3774AF28+40]", "trace": "pages = <conftest.pages.<locals>.Pages object at 0x000002964A377260>, doc_username = 'steve@gmail.com', doctor_password = 'password', patientName = 'ranveer'\npatient_contactNo = '9873065421', patient_email = 'ranveer@gmail.com', patient_address = 'hsr,Banglore', patient_age = '35', medical_history = 'blood pressure'\n\n    @mark.parametrize(patient_headers,patient_data)\n    @mark.parametrize(doc_headers,doc_data)\n    def test_add_patient(pages,doc_username, doctor_password, patientName, patient_contactNo, patient_email, patient_address,patient_age,medical_history  ):\n        pages.loginpage.login_doctor(doc_username, doctor_password)\n>       pages.doctorpage.add_patient(patientName,patient_contactNo, patient_email,patient_address,patient_age, medical_history )\n\ntest\\test_add_patient_by_doc.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npom\\doctorpage.py:26: in add_patient\n    self.wrapper.click_element(self.click_submit)\ngeneric_utility\\lib_methods.py:16: in wrapper\n    return func(instance,locator,**kwargs)\ngeneric_utility\\lib_methods.py:37: in click_element\n    self.driver.find_element(*locator).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002964A375670>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF72F58E17F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD35E8257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFD3774AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" name=\"submit\" id=\"submit\" class=\"btn btn-o btn-primary\" disabled=\"\">...</button> is not clickable at point (331, 517). Other element would receive the click: <form role=\"form\" name=\"\" method=\"post\">...</form>\nE         (Session info: chrome=126.0.6478.185)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72F61EEB2+31554]\nE       \t(No symbol) [0x00007FF72F597EE9]\nE       \t(No symbol) [0x00007FF72F45872A]\nE       \t(No symbol) [0x00007FF72F4B012E]\nE       \t(No symbol) [0x00007FF72F4ADAF2]\nE       \t(No symbol) [0x00007FF72F4AAF8B]\nE       \t(No symbol) [0x00007FF72F4AA156]\nE       \t(No symbol) [0x00007FF72F49C151]\nE       \t(No symbol) [0x00007FF72F4CD02A]\nE       \t(No symbol) [0x00007FF72F49BA76]\nE       \t(No symbol) [0x00007FF72F4CD240]\nE       \t(No symbol) [0x00007FF72F4EC977]\nE       \t(No symbol) [0x00007FF72F4CCDD3]\nE       \t(No symbol) [0x00007FF72F49A33B]\nE       \t(No symbol) [0x00007FF72F49AED1]\nE       \tGetHandleVerifier [0x00007FF72F928B2D+3217341]\nE       \tGetHandleVerifier [0x00007FF72F975AF3+3532675]\nE       \tGetHandleVerifier [0x00007FF72F96B0F0+3489152]\nE       \tGetHandleVerifier [0x00007FF72F6CE786+750614]\nE       \t(No symbol) [0x00007FF72F5A376F]\nE       \t(No symbol) [0x00007FF72F59EB24]\nE       \t(No symbol) [0x00007FF72F59ECB2]\nE       \t(No symbol) [0x00007FF72F58E17F]\nE       \tBaseThreadInitThunk [0x00007FFD35E8257D+29]\nE       \tRtlUserThreadStart [0x00007FFD3774AF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "doc_username", "value": "'steve@gmail.com'"}, {"name": "doctor_password", "value": "'password'"}, {"name": "patientName", "value": "'ranveer'"}, {"name": "patient_contactNo", "value": "'9873065421'"}, {"name": "patient_email", "value": "'ranveer@gmail.com'"}, {"name": "patient_address", "value": "'hsr,Banglore'"}, {"name": "patient_age", "value": "'35'"}, {"name": "medical_history", "value": "'blood pressure'"}], "start": 1722343056559, "stop": 1722343080254, "uuid": "455acf5f-8289-45f5-8e45-77ac22422319", "historyId": "ae43e74e8018f7c6ffae32c2ecb861c6", "testCaseId": "30f1f9456d49220e153c90ddde8c85c0", "fullName": "test.test_add_patient_by_doc#test_add_patient", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_add_patient_by_doc"}, {"name": "host", "value": "LAPTOP-H6NEPE8I"}, {"name": "thread", "value": "23536-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_add_patient_by_doc"}]}